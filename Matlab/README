Nyt testcase.m:n testi toimii yleisesti ottaen ihan kivasti, yhdistelin Aapon
viimeisimmät muutokset omiini näin illan päätteeksi. Demo osoittaa, että tämänhetkisillä
algoritmeillä muutama kymmenen hiukkasta pyörii vielä jonkinlaisella nopeudella,
mutta sen korkeammassa suuruusluokassa päädytään kiusallisen hitaaseen tilanteeseen.

Päädyin käyttämään tuossa testissä vielä yksinkertaistettua versiota 
random-generoiduista aloitussijainneista, kun tuohon hätään kummemmille ominaisuuksille
ei ollut tarvetta.

Graafinen esitys voisi myös olla harkinnan arvoinen, tällä hetkellä plottailen
vain hiukkasten sijainteja. Ajoista tulee luultavasti sen verran hitaita optimoidussakin
tapauksessa, että niistä on syytä tehdä animoituja klippejä etukäteen (vaihtoehto:
sijaintidatan tallentaminen ja näyttäminen matlabissa).- Hannu

Viskositeettitermi vaikuttaisi toimivan, mutta se ei vaikuta tuohon testitilanteeseen.
Sen merkitys pitäisi kaiketi näkyä vain, jos partikkeliaallot yrittävät mennä
toistensa läpi/kohdata. Aion katsoa seuraavaksi optimoitavaa aika-askeleen pituutta,
mutta en lisää mitään koodia ennen perjantaita (äkkilähtö Keski-Suomeen, mutta olen
takaisin koneen ääressä perjantaina). - Aapo


Tehtiinpä toisistamme tietämättä samalla logiikalla indeksoinnit.
r = matriisi(N, dim)  eli 2. indeksi on komponentit ja ensimmäinen on itse hitu. Samoin nopeudella.

init_2D_test.m  on vain testiscripti, se alustaa r, v kuntoon (hiukkasilla on siis oikeat sijainnit! 2D)

random_box_2D.m syö hitujen määrän ja laatikon nurkkapisteet, tekee hiduille sijainnit
randomisti keskellä olevaan laatikkoon

Initializing.m  alustaa r ja v nollaksi, mutta antaa ulos myös grid:n, joka on yksi pitkä cell-vektori johon indeksoida laatikoissa olevat hidut.

Kirjotan myöhemmin funktiokuvaukset kivemmiksi tai jotain :D


